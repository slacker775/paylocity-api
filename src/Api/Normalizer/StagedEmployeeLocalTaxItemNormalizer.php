<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class StagedEmployeeLocalTaxItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Paylocity\\Api\\Model\\StagedEmployeeLocalTaxItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Paylocity\\Api\\Model\\StagedEmployeeLocalTaxItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Paylocity\Api\Model\StagedEmployeeLocalTaxItem();
        if (property_exists($data, 'exemptions')) {
            $value = $data->{'exemptions'};
            if (is_float($data->{'exemptions'})) {
                $value = $data->{'exemptions'};
            } elseif (is_null($data->{'exemptions'})) {
                $value = $data->{'exemptions'};
            }
            $object->setExemptions($value);
        }
        if (property_exists($data, 'exemptions2')) {
            $value_1 = $data->{'exemptions2'};
            if (is_float($data->{'exemptions2'})) {
                $value_1 = $data->{'exemptions2'};
            } elseif (is_null($data->{'exemptions2'})) {
                $value_1 = $data->{'exemptions2'};
            }
            $object->setExemptions2($value_1);
        }
        if (property_exists($data, 'filingStatus')) {
            $value_2 = $data->{'filingStatus'};
            if (is_string($data->{'filingStatus'})) {
                $value_2 = $data->{'filingStatus'};
            } elseif (is_null($data->{'filingStatus'})) {
                $value_2 = $data->{'filingStatus'};
            }
            $object->setFilingStatus($value_2);
        }
        if (property_exists($data, 'residentPSD')) {
            $value_3 = $data->{'residentPSD'};
            if (is_string($data->{'residentPSD'})) {
                $value_3 = $data->{'residentPSD'};
            } elseif (is_null($data->{'residentPSD'})) {
                $value_3 = $data->{'residentPSD'};
            }
            $object->setResidentPSD($value_3);
        }
        if (property_exists($data, 'taxCode')) {
            $value_4 = $data->{'taxCode'};
            if (is_string($data->{'taxCode'})) {
                $value_4 = $data->{'taxCode'};
            } elseif (is_null($data->{'taxCode'})) {
                $value_4 = $data->{'taxCode'};
            }
            $object->setTaxCode($value_4);
        }
        if (property_exists($data, 'workPSD')) {
            $value_5 = $data->{'workPSD'};
            if (is_string($data->{'workPSD'})) {
                $value_5 = $data->{'workPSD'};
            } elseif (is_null($data->{'workPSD'})) {
                $value_5 = $data->{'workPSD'};
            }
            $object->setWorkPSD($value_5);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        $value = $object->getExemptions();
        if (is_float($object->getExemptions())) {
            $value = $object->getExemptions();
        } elseif (is_null($object->getExemptions())) {
            $value = $object->getExemptions();
        }
        $data->{'exemptions'} = $value;
        $value_1 = $object->getExemptions2();
        if (is_float($object->getExemptions2())) {
            $value_1 = $object->getExemptions2();
        } elseif (is_null($object->getExemptions2())) {
            $value_1 = $object->getExemptions2();
        }
        $data->{'exemptions2'} = $value_1;
        $value_2 = $object->getFilingStatus();
        if (is_string($object->getFilingStatus())) {
            $value_2 = $object->getFilingStatus();
        } elseif (is_null($object->getFilingStatus())) {
            $value_2 = $object->getFilingStatus();
        }
        $data->{'filingStatus'} = $value_2;
        $value_3 = $object->getResidentPSD();
        if (is_string($object->getResidentPSD())) {
            $value_3 = $object->getResidentPSD();
        } elseif (is_null($object->getResidentPSD())) {
            $value_3 = $object->getResidentPSD();
        }
        $data->{'residentPSD'} = $value_3;
        $value_4 = $object->getTaxCode();
        if (is_string($object->getTaxCode())) {
            $value_4 = $object->getTaxCode();
        } elseif (is_null($object->getTaxCode())) {
            $value_4 = $object->getTaxCode();
        }
        $data->{'taxCode'} = $value_4;
        $value_5 = $object->getWorkPSD();
        if (is_string($object->getWorkPSD())) {
            $value_5 = $object->getWorkPSD();
        } elseif (is_null($object->getWorkPSD())) {
            $value_5 = $object->getWorkPSD();
        }
        $data->{'workPSD'} = $value_5;

        return $data;
    }
}
