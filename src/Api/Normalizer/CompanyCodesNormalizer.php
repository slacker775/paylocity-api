<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CompanyCodesNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Paylocity\\Api\\Model\\CompanyCodes';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Paylocity\\Api\\Model\\CompanyCodes';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Paylocity\Api\Model\CompanyCodes();
        if (property_exists($data, 'code')) {
            $value = $data->{'code'};
            if (is_string($data->{'code'})) {
                $value = $data->{'code'};
            } elseif (is_null($data->{'code'})) {
                $value = $data->{'code'};
            }
            $object->setCode($value);
        }
        if (property_exists($data, 'description')) {
            $value_1 = $data->{'description'};
            if (is_string($data->{'description'})) {
                $value_1 = $data->{'description'};
            } elseif (is_null($data->{'description'})) {
                $value_1 = $data->{'description'};
            }
            $object->setDescription($value_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        $value = $object->getCode();
        if (is_string($object->getCode())) {
            $value = $object->getCode();
        } elseif (is_null($object->getCode())) {
            $value = $object->getCode();
        }
        $data->{'code'} = $value;
        $value_1 = $object->getDescription();
        if (is_string($object->getDescription())) {
            $value_1 = $object->getDescription();
        } elseif (is_null($object->getDescription())) {
            $value_1 = $object->getDescription();
        }
        $data->{'description'} = $value_1;

        return $data;
    }
}
