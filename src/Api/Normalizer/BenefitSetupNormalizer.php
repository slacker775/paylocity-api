<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BenefitSetupNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Paylocity\\Api\\Model\\BenefitSetup';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Paylocity\\Api\\Model\\BenefitSetup';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Paylocity\Api\Model\BenefitSetup();
        if (property_exists($data, 'benefitClass')) {
            $object->setBenefitClass($data->{'benefitClass'});
        }
        if (property_exists($data, 'benefitClassEffectiveDate')) {
            $object->setBenefitClassEffectiveDate($data->{'benefitClassEffectiveDate'});
        }
        if (property_exists($data, 'benefitSalary')) {
            $object->setBenefitSalary($data->{'benefitSalary'});
        }
        if (property_exists($data, 'benefitSalaryEffectiveDate')) {
            $object->setBenefitSalaryEffectiveDate($data->{'benefitSalaryEffectiveDate'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        $data->{'benefitClass'} = $object->getBenefitClass();
        $data->{'benefitClassEffectiveDate'} = $object->getBenefitClassEffectiveDate();
        $data->{'benefitSalary'} = $object->getBenefitSalary();
        $data->{'benefitSalaryEffectiveDate'} = $object->getBenefitSalaryEffectiveDate();

        return $data;
    }
}
