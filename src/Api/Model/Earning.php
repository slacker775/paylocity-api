<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Model;

class Earning
{
    /**
     * Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10.
     *
     * @var string|null
     */
    protected $agency;
    /**
     * Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2).
     *
     * @var float|null
     */
    protected $amount;
    /**
     * Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2).
     *
     * @var float|null
     */
    protected $annualMaximum;
    /**
     * Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20.
     *
     * @var string|null
     */
    protected $calculationCode;
    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     *
     * @var string|null
     */
    protected $costCenter1;
    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     *
     * @var string|null
     */
    protected $costCenter2;
    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     *
     * @var string|null
     */
    protected $costCenter3;
    /**
     * Earning code. Must match Company setup. <br  />Max length: 10.
     *
     * @var string|null
     */
    protected $earningCode;
    /**
     * Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     *
     * @var string|null
     */
    protected $effectiveDate;
    /**
     * Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     *
     * @var string|null
     */
    protected $endDate;
    /**
     * Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5.
     *
     * @var string|null
     */
    protected $frequency;
    /**
     * Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2).
     *
     * @var float|null
     */
    protected $goal;
    /**
     * The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2).
     *
     * @var float|null
     */
    protected $hoursOrUnits;
    /**
     * Used for ACA. If not entered, defaulted to Company earning setup.
     *
     * @var bool|null
     */
    protected $isSelfInsured;
    /**
     * Job code associated with earnings. Must match Company setup.<br  /> Max length: 20.
     *
     * @var string|null
     */
    protected $jobCode;
    /**
     * Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50.
     *
     * @var string|null
     */
    protected $miscellaneousInfo;
    /**
     * Amount already paid to employee toward goal. <br  /> Decimal(12,2).
     *
     * @var float|null
     */
    protected $paidTowardsGoal;
    /**
     * Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2).
     *
     * @var float|null
     */
    protected $payPeriodMaximum;
    /**
     * Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2).
     *
     * @var float|null
     */
    protected $payPeriodMinimum;
    /**
     * Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2).
     *
     * @var float|null
     */
    protected $rate;
    /**
     * Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10.
     *
     * @var string|null
     */
    protected $rateCode;
    /**
     * Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     *
     * @var string|null
     */
    protected $startDate;

    /**
     * Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10.
     */
    public function getAgency(): ?string
    {
        return $this->agency;
    }

    /**
     * Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10.
     */
    public function setAgency(?string $agency): self
    {
        $this->agency = $agency;

        return $this;
    }

    /**
     * Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2).
     */
    public function getAmount(): ?float
    {
        return $this->amount;
    }

    /**
     * Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2).
     */
    public function setAmount(?float $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2).
     */
    public function getAnnualMaximum(): ?float
    {
        return $this->annualMaximum;
    }

    /**
     * Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2).
     */
    public function setAnnualMaximum(?float $annualMaximum): self
    {
        $this->annualMaximum = $annualMaximum;

        return $this;
    }

    /**
     * Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20.
     */
    public function getCalculationCode(): ?string
    {
        return $this->calculationCode;
    }

    /**
     * Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20.
     */
    public function setCalculationCode(?string $calculationCode): self
    {
        $this->calculationCode = $calculationCode;

        return $this;
    }

    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     */
    public function getCostCenter1(): ?string
    {
        return $this->costCenter1;
    }

    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     */
    public function setCostCenter1(?string $costCenter1): self
    {
        $this->costCenter1 = $costCenter1;

        return $this;
    }

    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     */
    public function getCostCenter2(): ?string
    {
        return $this->costCenter2;
    }

    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     */
    public function setCostCenter2(?string $costCenter2): self
    {
        $this->costCenter2 = $costCenter2;

        return $this;
    }

    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     */
    public function getCostCenter3(): ?string
    {
        return $this->costCenter3;
    }

    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10.
     */
    public function setCostCenter3(?string $costCenter3): self
    {
        $this->costCenter3 = $costCenter3;

        return $this;
    }

    /**
     * Earning code. Must match Company setup. <br  />Max length: 10.
     */
    public function getEarningCode(): ?string
    {
        return $this->earningCode;
    }

    /**
     * Earning code. Must match Company setup. <br  />Max length: 10.
     */
    public function setEarningCode(?string $earningCode): self
    {
        $this->earningCode = $earningCode;

        return $this;
    }

    /**
     * Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    public function getEffectiveDate(): ?string
    {
        return $this->effectiveDate;
    }

    /**
     * Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    public function setEffectiveDate(?string $effectiveDate): self
    {
        $this->effectiveDate = $effectiveDate;

        return $this;
    }

    /**
     * Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    public function getEndDate(): ?string
    {
        return $this->endDate;
    }

    /**
     * Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    public function setEndDate(?string $endDate): self
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5.
     */
    public function getFrequency(): ?string
    {
        return $this->frequency;
    }

    /**
     * Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5.
     */
    public function setFrequency(?string $frequency): self
    {
        $this->frequency = $frequency;

        return $this;
    }

    /**
     * Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2).
     */
    public function getGoal(): ?float
    {
        return $this->goal;
    }

    /**
     * Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2).
     */
    public function setGoal(?float $goal): self
    {
        $this->goal = $goal;

        return $this;
    }

    /**
     * The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2).
     */
    public function getHoursOrUnits(): ?float
    {
        return $this->hoursOrUnits;
    }

    /**
     * The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2).
     */
    public function setHoursOrUnits(?float $hoursOrUnits): self
    {
        $this->hoursOrUnits = $hoursOrUnits;

        return $this;
    }

    /**
     * Used for ACA. If not entered, defaulted to Company earning setup.
     */
    public function getIsSelfInsured(): ?bool
    {
        return $this->isSelfInsured;
    }

    /**
     * Used for ACA. If not entered, defaulted to Company earning setup.
     */
    public function setIsSelfInsured(?bool $isSelfInsured): self
    {
        $this->isSelfInsured = $isSelfInsured;

        return $this;
    }

    /**
     * Job code associated with earnings. Must match Company setup.<br  /> Max length: 20.
     */
    public function getJobCode(): ?string
    {
        return $this->jobCode;
    }

    /**
     * Job code associated with earnings. Must match Company setup.<br  /> Max length: 20.
     */
    public function setJobCode(?string $jobCode): self
    {
        $this->jobCode = $jobCode;

        return $this;
    }

    /**
     * Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50.
     */
    public function getMiscellaneousInfo(): ?string
    {
        return $this->miscellaneousInfo;
    }

    /**
     * Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50.
     */
    public function setMiscellaneousInfo(?string $miscellaneousInfo): self
    {
        $this->miscellaneousInfo = $miscellaneousInfo;

        return $this;
    }

    /**
     * Amount already paid to employee toward goal. <br  /> Decimal(12,2).
     */
    public function getPaidTowardsGoal(): ?float
    {
        return $this->paidTowardsGoal;
    }

    /**
     * Amount already paid to employee toward goal. <br  /> Decimal(12,2).
     */
    public function setPaidTowardsGoal(?float $paidTowardsGoal): self
    {
        $this->paidTowardsGoal = $paidTowardsGoal;

        return $this;
    }

    /**
     * Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2).
     */
    public function getPayPeriodMaximum(): ?float
    {
        return $this->payPeriodMaximum;
    }

    /**
     * Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2).
     */
    public function setPayPeriodMaximum(?float $payPeriodMaximum): self
    {
        $this->payPeriodMaximum = $payPeriodMaximum;

        return $this;
    }

    /**
     * Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2).
     */
    public function getPayPeriodMinimum(): ?float
    {
        return $this->payPeriodMinimum;
    }

    /**
     * Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2).
     */
    public function setPayPeriodMinimum(?float $payPeriodMinimum): self
    {
        $this->payPeriodMinimum = $payPeriodMinimum;

        return $this;
    }

    /**
     * Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2).
     */
    public function getRate(): ?float
    {
        return $this->rate;
    }

    /**
     * Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2).
     */
    public function setRate(?float $rate): self
    {
        $this->rate = $rate;

        return $this;
    }

    /**
     * Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10.
     */
    public function getRateCode(): ?string
    {
        return $this->rateCode;
    }

    /**
     * Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10.
     */
    public function setRateCode(?string $rateCode): self
    {
        $this->rateCode = $rateCode;

        return $this;
    }

    /**
     * Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }

    /**
     * Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    public function setStartDate(?string $startDate): self
    {
        $this->startDate = $startDate;

        return $this;
    }
}
