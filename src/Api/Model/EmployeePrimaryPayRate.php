<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Model;

class EmployeePrimaryPayRate
{
    /**
     * Employee annual salary.<br />Decimal (12,2).
     *
     * @var float|null
     */
    protected $annualSalary;
    /**
     * Employee base rate, used for Hourly employees. <br  />Decimal (12,2).
     *
     * @var float|null
     */
    protected $baseRate;
    /**
     * The date of the first check on which the new pay rate will appear. This value is only applicable when updating an existing employee. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
     *
     * @var string|null
     */
    protected $beginCheckDate;
    /**
     * Pay rate change reason.<br  /> Max length: 30.
     *
     * @var string|null
     */
    protected $changeReason;
    /**
     * Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2).
     *
     * @var float|null
     */
    protected $defaultHours;
    /**
     * The date the employee's pay rate takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
     *
     * @var string|null
     */
    protected $effectiveDate;
    /**
     * If set to *True*, employee will be paid automatically using deafultHours.
     *
     * @var bool|null
     */
    protected $isAutoPay;
    /**
     * Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5.
     *
     * @var string|null
     */
    protected $payFrequency;
    /**
     * Employee pay grade. Must match Company setup. <br  /> Max length: 10.
     *
     * @var string|null
     */
    protected $payGrade;
    /**
     * Pay rate notes regarding employee.<br  /> Max length: 250.
     *
     * @var string|null
     */
    protected $payRateNote;
    /**
     * Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10.
     *
     * @var string|null
     */
    protected $payType;
    /**
     * Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10.
     *
     * @var string|null
     */
    protected $ratePer;
    /**
     * Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,2).
     *
     * @var float|null
     */
    protected $salary;

    /**
     * Employee annual salary.<br />Decimal (12,2).
     */
    public function getAnnualSalary(): ?float
    {
        return $this->annualSalary;
    }

    /**
     * Employee annual salary.<br />Decimal (12,2).
     */
    public function setAnnualSalary(?float $annualSalary): self
    {
        $this->annualSalary = $annualSalary;

        return $this;
    }

    /**
     * Employee base rate, used for Hourly employees. <br  />Decimal (12,2).
     */
    public function getBaseRate(): ?float
    {
        return $this->baseRate;
    }

    /**
     * Employee base rate, used for Hourly employees. <br  />Decimal (12,2).
     */
    public function setBaseRate(?float $baseRate): self
    {
        $this->baseRate = $baseRate;

        return $this;
    }

    /**
     * The date of the first check on which the new pay rate will appear. This value is only applicable when updating an existing employee. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
     */
    public function getBeginCheckDate(): ?string
    {
        return $this->beginCheckDate;
    }

    /**
     * The date of the first check on which the new pay rate will appear. This value is only applicable when updating an existing employee. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
     */
    public function setBeginCheckDate(?string $beginCheckDate): self
    {
        $this->beginCheckDate = $beginCheckDate;

        return $this;
    }

    /**
     * Pay rate change reason.<br  /> Max length: 30.
     */
    public function getChangeReason(): ?string
    {
        return $this->changeReason;
    }

    /**
     * Pay rate change reason.<br  /> Max length: 30.
     */
    public function setChangeReason(?string $changeReason): self
    {
        $this->changeReason = $changeReason;

        return $this;
    }

    /**
     * Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2).
     */
    public function getDefaultHours(): ?float
    {
        return $this->defaultHours;
    }

    /**
     * Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2).
     */
    public function setDefaultHours(?float $defaultHours): self
    {
        $this->defaultHours = $defaultHours;

        return $this;
    }

    /**
     * The date the employee's pay rate takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
     */
    public function getEffectiveDate(): ?string
    {
        return $this->effectiveDate;
    }

    /**
     * The date the employee's pay rate takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
     */
    public function setEffectiveDate(?string $effectiveDate): self
    {
        $this->effectiveDate = $effectiveDate;

        return $this;
    }

    /**
     * If set to *True*, employee will be paid automatically using deafultHours.
     */
    public function getIsAutoPay(): ?bool
    {
        return $this->isAutoPay;
    }

    /**
     * If set to *True*, employee will be paid automatically using deafultHours.
     */
    public function setIsAutoPay(?bool $isAutoPay): self
    {
        $this->isAutoPay = $isAutoPay;

        return $this;
    }

    /**
     * Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5.
     */
    public function getPayFrequency(): ?string
    {
        return $this->payFrequency;
    }

    /**
     * Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5.
     */
    public function setPayFrequency(?string $payFrequency): self
    {
        $this->payFrequency = $payFrequency;

        return $this;
    }

    /**
     * Employee pay grade. Must match Company setup. <br  /> Max length: 10.
     */
    public function getPayGrade(): ?string
    {
        return $this->payGrade;
    }

    /**
     * Employee pay grade. Must match Company setup. <br  /> Max length: 10.
     */
    public function setPayGrade(?string $payGrade): self
    {
        $this->payGrade = $payGrade;

        return $this;
    }

    /**
     * Pay rate notes regarding employee.<br  /> Max length: 250.
     */
    public function getPayRateNote(): ?string
    {
        return $this->payRateNote;
    }

    /**
     * Pay rate notes regarding employee.<br  /> Max length: 250.
     */
    public function setPayRateNote(?string $payRateNote): self
    {
        $this->payRateNote = $payRateNote;

        return $this;
    }

    /**
     * Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10.
     */
    public function getPayType(): ?string
    {
        return $this->payType;
    }

    /**
     * Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10.
     */
    public function setPayType(?string $payType): self
    {
        $this->payType = $payType;

        return $this;
    }

    /**
     * Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10.
     */
    public function getRatePer(): ?string
    {
        return $this->ratePer;
    }

    /**
     * Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10.
     */
    public function setRatePer(?string $ratePer): self
    {
        $this->ratePer = $ratePer;

        return $this;
    }

    /**
     * Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,2).
     */
    public function getSalary(): ?float
    {
        return $this->salary;
    }

    /**
     * Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,2).
     */
    public function setSalary(?float $salary): self
    {
        $this->salary = $salary;

        return $this;
    }
}
