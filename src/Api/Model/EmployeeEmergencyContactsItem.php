<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Model;

class EmployeeEmergencyContactsItem
{
    /**
     * 1st address line.
     *
     * @var string|null
     */
    protected $address1;
    /**
     * 2nd address line.
     *
     * @var string|null
     */
    protected $address2;
    /**
     * City.
     *
     * @var string|null
     */
    protected $city;
    /**
     * County.
     *
     * @var string|null
     */
    protected $country;
    /**
     * Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).
     *
     * @var string|null
     */
    protected $county;
    /**
     * Contact email.  Must be valid email address format.
     *
     * @var string|null
     */
    protected $email;
    /**
     * Required. Contact first name. <br  />Max length: 40.
     *
     * @var string|null
     */
    protected $firstName;
    /**
     * Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     *
     * @var string|null
     */
    protected $homePhone;
    /**
     * Required. Contact last name. <br  />Max length: 40.
     *
     * @var string|null
     */
    protected $lastName;
    /**
     * Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     *
     * @var string|null
     */
    protected $mobilePhone;
    /**
     * Notes. <br  />Max length: 1000.
     *
     * @var string|null
     */
    protected $notes;
    /**
     * Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     *
     * @var string|null
     */
    protected $pager;
    /**
     * Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work).
     *
     * @var string|null
     */
    protected $primaryPhone;
    /**
     * Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).
     *
     * @var string|null
     */
    protected $priority;
    /**
     * Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.
     *
     * @var string|null
     */
    protected $relationship;
    /**
     * State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).
     *
     * @var string|null
     */
    protected $state;
    /**
     * Valid values are *true* or *false*.
     *
     * @var bool
     */
    protected $syncEmployeeInfo;
    /**
     * Work Extension.
     *
     * @var string|null
     */
    protected $workExtension;
    /**
     * Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     *
     * @var string|null
     */
    protected $workPhone;
    /**
     * Postal code.  If U.S. address, must be a valid zip code.
     *
     * @var string|null
     */
    protected $zip;

    /**
     * 1st address line.
     */
    public function getAddress1(): ?string
    {
        return $this->address1;
    }

    /**
     * 1st address line.
     */
    public function setAddress1(?string $address1): self
    {
        $this->address1 = $address1;

        return $this;
    }

    /**
     * 2nd address line.
     */
    public function getAddress2(): ?string
    {
        return $this->address2;
    }

    /**
     * 2nd address line.
     */
    public function setAddress2(?string $address2): self
    {
        $this->address2 = $address2;

        return $this;
    }

    /**
     * City.
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * City.
     */
    public function setCity(?string $city): self
    {
        $this->city = $city;

        return $this;
    }

    /**
     * County.
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * County.
     */
    public function setCountry(?string $country): self
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).
     */
    public function getCounty(): ?string
    {
        return $this->county;
    }

    /**
     * Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).
     */
    public function setCounty(?string $county): self
    {
        $this->county = $county;

        return $this;
    }

    /**
     * Contact email.  Must be valid email address format.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Contact email.  Must be valid email address format.
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Required. Contact first name. <br  />Max length: 40.
     */
    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    /**
     * Required. Contact first name. <br  />Max length: 40.
     */
    public function setFirstName(?string $firstName): self
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function getHomePhone(): ?string
    {
        return $this->homePhone;
    }

    /**
     * Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function setHomePhone(?string $homePhone): self
    {
        $this->homePhone = $homePhone;

        return $this;
    }

    /**
     * Required. Contact last name. <br  />Max length: 40.
     */
    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    /**
     * Required. Contact last name. <br  />Max length: 40.
     */
    public function setLastName(?string $lastName): self
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function getMobilePhone(): ?string
    {
        return $this->mobilePhone;
    }

    /**
     * Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function setMobilePhone(?string $mobilePhone): self
    {
        $this->mobilePhone = $mobilePhone;

        return $this;
    }

    /**
     * Notes. <br  />Max length: 1000.
     */
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    /**
     * Notes. <br  />Max length: 1000.
     */
    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;

        return $this;
    }

    /**
     * Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function getPager(): ?string
    {
        return $this->pager;
    }

    /**
     * Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function setPager(?string $pager): self
    {
        $this->pager = $pager;

        return $this;
    }

    /**
     * Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work).
     */
    public function getPrimaryPhone(): ?string
    {
        return $this->primaryPhone;
    }

    /**
     * Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work).
     */
    public function setPrimaryPhone(?string $primaryPhone): self
    {
        $this->primaryPhone = $primaryPhone;

        return $this;
    }

    /**
     * Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).
     */
    public function getPriority(): ?string
    {
        return $this->priority;
    }

    /**
     * Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).
     */
    public function setPriority(?string $priority): self
    {
        $this->priority = $priority;

        return $this;
    }

    /**
     * Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.
     */
    public function getRelationship(): ?string
    {
        return $this->relationship;
    }

    /**
     * Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.
     */
    public function setRelationship(?string $relationship): self
    {
        $this->relationship = $relationship;

        return $this;
    }

    /**
     * State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).
     */
    public function setState(?string $state): self
    {
        $this->state = $state;

        return $this;
    }

    /**
     * Valid values are *true* or *false*.
     */
    public function getSyncEmployeeInfo(): bool
    {
        return $this->syncEmployeeInfo;
    }

    /**
     * Valid values are *true* or *false*.
     */
    public function setSyncEmployeeInfo(bool $syncEmployeeInfo): self
    {
        $this->syncEmployeeInfo = $syncEmployeeInfo;

        return $this;
    }

    /**
     * Work Extension.
     */
    public function getWorkExtension(): ?string
    {
        return $this->workExtension;
    }

    /**
     * Work Extension.
     */
    public function setWorkExtension(?string $workExtension): self
    {
        $this->workExtension = $workExtension;

        return $this;
    }

    /**
     * Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function getWorkPhone(): ?string
    {
        return $this->workPhone;
    }

    /**
     * Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
     */
    public function setWorkPhone(?string $workPhone): self
    {
        $this->workPhone = $workPhone;

        return $this;
    }

    /**
     * Postal code.  If U.S. address, must be a valid zip code.
     */
    public function getZip(): ?string
    {
        return $this->zip;
    }

    /**
     * Postal code.  If U.S. address, must be a valid zip code.
     */
    public function setZip(?string $zip): self
    {
        $this->zip = $zip;

        return $this;
    }
}
