<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api;

class Client extends \Jane\OpenApiRuntime\Client\Psr18Client
{
    /**
     * Get All Company Codes for the selected company and resource.
     *
     * @param string $companyId        Company Id
     * @param string $codeResource     Type of Company Code. Common values costcenter1, costcenter2, costcenter3, deductions, earnings, taxes, paygrade, positions.
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetAllCompanyCodesAndDescriptionsByResourceNotFoundException
     * @throws \Paylocity\Api\Exception\GetAllCompanyCodesAndDescriptionsByResourceInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\CompanyCodes[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAllCompanyCodesAndDescriptionsByResource(string $companyId, string $codeResource, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetAllCompanyCodesAndDescriptionsByResource($companyId, $codeResource, $headerParameters), $fetch);
    }

    /**
     * Get All Custom Fields for the selected company.
     *
     * @param string $companyId        Company Id
     * @param string $category         Custom Fields Category
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetAllCustomFieldsByCategoryNotFoundException
     * @throws \Paylocity\Api\Exception\GetAllCustomFieldsByCategoryInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\CustomFieldDefinition[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAllCustomFieldsByCategory(string $companyId, string $category, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetAllCustomFieldsByCategory($companyId, $category, $headerParameters), $fetch);
    }

    /**
     * New Employee API sends new employee data directly to Web Pay. Companies who use the New Hire Template in Web Pay may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
     *
     * @param string $companyId        Company Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddEmployeeBadRequestException
     * @throws \Paylocity\Api\Exception\AddEmployeeInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\EmployeeIdResponse[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function addEmployee(string $companyId, \Paylocity\Api\Model\Employee $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddEmployee($companyId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Get All Employees API will return employee data currently available in Web Pay.
     *
     * @param string $companyId       Company Id
     * @param array  $queryParameters {
     *
     *     @var int $pagesize Number of records per page. Default value is 25.
     *     @var int $pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
     *     @var bool $includetotalcount Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetAllEmployeesNotFoundException
     * @throws \Paylocity\Api\Exception\GetAllEmployeesInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getAllEmployees(string $companyId, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetAllEmployees($companyId, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Get Employee API will return employee data currently available in Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetEmployeeNotFoundException
     * @throws \Paylocity\Api\Exception\GetEmployeeInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getEmployee(string $companyId, string $employeeId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetEmployee($companyId, $employeeId, $headerParameters), $fetch);
    }

    /**
     * Update Employee API will update existing employee data in WebPay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\UpdateEmployeeBadRequestException
     * @throws \Paylocity\Api\Exception\UpdateEmployeeInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function updateEmployee(string $companyId, string $employeeId, \Paylocity\Api\Model\Employee $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\UpdateEmployee($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Sends new or updated employee additional rates information directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddOrUpdateAdditionalRatesBadRequestException
     * @throws \Paylocity\Api\Exception\AddOrUpdateAdditionalRatesInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addOrUpdateAdditionalRates(string $companyId, string $employeeId, \Paylocity\Api\Model\AdditionalRate $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddOrUpdateAdditionalRates($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Sends new or updated employee benefit setup information directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\UpdateOrAddEmployeeBenefitSetupBadRequestException
     * @throws \Paylocity\Api\Exception\UpdateOrAddEmployeeBenefitSetupInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function updateOrAddEmployeeBenefitSetup(string $companyId, string $employeeId, \Paylocity\Api\Model\BenefitSetup $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\UpdateOrAddEmployeeBenefitSetup($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Get All Earnings returns all earnings for the selected employee.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetAllEarningsInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\Earning[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAllEarnings(string $companyId, string $employeeId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetAllEarnings($companyId, $employeeId, $headerParameters), $fetch);
    }

    /**
     * Add/Update Earning API sends new or updated employee earnings information directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddOrUpdateAnEmployeeEarningBadRequestException
     * @throws \Paylocity\Api\Exception\AddOrUpdateAnEmployeeEarningInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addOrUpdateAnEmployeeEarning(string $companyId, string $employeeId, \Paylocity\Api\Model\Earning $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddOrUpdateAnEmployeeEarning($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Get Earnings returns all earnings with the provided earning code for the selected employee.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param string $earningCode      Earning Code
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetEarningsByEarningCodeInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\Earning[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getEarningsByEarningCode(string $companyId, string $employeeId, string $earningCode, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetEarningsByEarningCode($companyId, $employeeId, $earningCode, $headerParameters), $fetch);
    }

    /**
     * Delete Earning by Earning Code and Start Date.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param string $earningCode      Earning Code
     * @param string $startDate        Start Date
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\DeleteEarningByEarningCodeAndStartDateBadRequestException
     * @throws \Paylocity\Api\Exception\DeleteEarningByEarningCodeAndStartDateInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteEarningByEarningCodeAndStartDate(string $companyId, string $employeeId, string $earningCode, string $startDate, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\DeleteEarningByEarningCodeAndStartDate($companyId, $employeeId, $earningCode, $startDate, $headerParameters), $fetch);
    }

    /**
     * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param string $earningCode      Earning Code
     * @param string $startDate        Start Date
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetEarningByEarningCodeAndStartDateInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\Earning|\Psr\Http\Message\ResponseInterface|null
     */
    public function getEarningByEarningCodeAndStartDate(string $companyId, string $employeeId, string $earningCode, string $startDate, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetEarningByEarningCodeAndStartDate($companyId, $employeeId, $earningCode, $startDate, $headerParameters), $fetch);
    }

    /**
     * Sends new or updated employee emergency contacts directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddOrUpdateEmergencyContactsBadRequestException
     * @throws \Paylocity\Api\Exception\AddOrUpdateEmergencyContactsInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addOrUpdateEmergencyContacts(string $companyId, string $employeeId, \Paylocity\Api\Model\EmergencyContact $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddOrUpdateEmergencyContacts($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Returns all local taxes for the selected employee.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetAllLocalTaxesInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getAllLocalTaxes(string $companyId, string $employeeId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetAllLocalTaxes($companyId, $employeeId, $headerParameters), $fetch);
    }

    /**
     * Sends new employee local tax information directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddLocalTaxBadRequestException
     * @throws \Paylocity\Api\Exception\AddLocalTaxInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addLocalTax(string $companyId, string $employeeId, \stdClass $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddLocalTax($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Delete local tax by tax code.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param string $taxCode          Tax Code
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\DeleteLocalTaxByTaxCodeBadRequestException
     * @throws \Paylocity\Api\Exception\DeleteLocalTaxByTaxCodeInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteLocalTaxByTaxCode(string $companyId, string $employeeId, string $taxCode, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\DeleteLocalTaxByTaxCode($companyId, $employeeId, $taxCode, $headerParameters), $fetch);
    }

    /**
     * Returns all local taxes with the provided tax code for the selected employee.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param string $taxCode          Tax Code
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetLocalTaxByTaxCodeInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getLocalTaxByTaxCode(string $companyId, string $employeeId, string $taxCode, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetLocalTaxByTaxCode($companyId, $employeeId, $taxCode, $headerParameters), $fetch);
    }

    /**
     * Sends new or updated employee non-primary state tax information directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddOrUpdateNonPrimaryStateTaxBadRequestException
     * @throws \Paylocity\Api\Exception\AddOrUpdateNonPrimaryStateTaxInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addOrUpdateNonPrimaryStateTax(string $companyId, string $employeeId, \stdClass $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddOrUpdateNonPrimaryStateTax($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * Get pay statement details API will return employee pay statement details data currently available in Web Pay for the specified year.
     *
     * @param string $companyId       Company Id
     * @param string $employeeId      Employee Id
     * @param string $year            The year for which to retrieve pay statement data
     * @param array  $queryParameters {
     *
     *     @var int $pagesize Number of records per page. Default value is 25.
     *     @var int $pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
     *     @var bool $includetotalcount Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementDetailDataBasedOnTheSpecifiedYearNotFoundException
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementDetailDataBasedOnTheSpecifiedYearInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\PayStatementDetails[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getsEmployeePayStatementDetailDataBasedOnTheSpecifiedYear(string $companyId, string $employeeId, string $year, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetsEmployeePayStatementDetailDataBasedOnTheSpecifiedYear($companyId, $employeeId, $year, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Get pay statement details API will return employee pay statement detail data currently available in Web Pay for the specified year and check date.
     *
     * @param string $companyId       Company Id
     * @param string $employeeId      Employee Id
     * @param string $year            The year for which to retrieve pay statement data
     * @param string $checkDate       The check date for which to retrieve pay statement data
     * @param array  $queryParameters {
     *
     *     @var int $pagesize Number of records per page. Default value is 25.
     *     @var int $pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
     *     @var bool $includetotalcount Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementDetailDataBasedOnTheSpecifiedYearAndCheckDateNotFoundException
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementDetailDataBasedOnTheSpecifiedYearAndCheckDateInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\PayStatementDetails[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getsEmployeePayStatementDetailDataBasedOnTheSpecifiedYearAndCheckDate(string $companyId, string $employeeId, string $year, string $checkDate, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetsEmployeePayStatementDetailDataBasedOnTheSpecifiedYearAndCheckDate($companyId, $employeeId, $year, $checkDate, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Get pay statement summary API will return employee pay statement summary data currently available in Web Pay for the specified year.
     *
     * @param string $companyId       Company Id
     * @param string $employeeId      Employee Id
     * @param string $year            The year for which to retrieve pay statement data
     * @param array  $queryParameters {
     *
     *     @var int $pagesize Number of records per page. Default value is 25.
     *     @var int $pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
     *     @var bool $includetotalcount Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYearNotFoundException
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYearInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\PayStatementSummary[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYear(string $companyId, string $employeeId, string $year, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYear($companyId, $employeeId, $year, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Get pay statement summary API will return employee pay statement summary data currently available in Web Pay for the specified year and check date.
     *
     * @param string $companyId       Company Id
     * @param string $employeeId      Employee Id
     * @param string $year            The year for which to retrieve pay statement data
     * @param string $checkDate       The check date for which to retrieve pay statement data
     * @param array  $queryParameters {
     *
     *     @var int $pagesize Number of records per page. Default value is 25.
     *     @var int $pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber=0). Default value is 0.
     *     @var bool $includetotalcount Whether to include the total record count in the header's X-Pcty-Total-Count property. Default value is true.
     * }
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYearAndCheckDateNotFoundException
     * @throws \Paylocity\Api\Exception\GetsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYearAndCheckDateInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\PayStatementSummary[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYearAndCheckDate(string $companyId, string $employeeId, string $year, string $checkDate, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetsEmployeePayStatementSummaryDataBasedOnTheSpecifiedYearAndCheckDate($companyId, $employeeId, $year, $checkDate, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Sends new or updated employee primary state tax information directly to Web Pay.
     *
     * @param string $companyId        Company Id
     * @param string $employeeId       Employee Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddOrUpdatePrimaryStateTaxBadRequestException
     * @throws \Paylocity\Api\Exception\AddOrUpdatePrimaryStateTaxInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addOrUpdatePrimaryStateTax(string $companyId, string $employeeId, \stdClass $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddOrUpdatePrimaryStateTax($companyId, $employeeId, $requestBody, $headerParameters), $fetch);
    }

    /**
     * The company-specific Open API endpoint allows the client to GET an Open API document for the Paylocity API that is customized with company-specific resource schemas. These customized resource schemas define certain properties as enumerations of pre-defined values that correspond to the company's setup with Web Pay. The customized schemas also indicate which properties are required by the company within Web Pay.<br  />To learn more about Open API, click [here](https://www.openapis.org/).
     *
     * @param string $companyId        Company Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\GetCompanySpecificOpenAPIDocumentationBadRequestException
     * @throws \Paylocity\Api\Exception\GetCompanySpecificOpenAPIDocumentationInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getCompanySpecificOpenAPIDocumentation(string $companyId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\GetCompanySpecificOpenAPIDocumentation($companyId, $headerParameters), $fetch);
    }

    /**
     * Obtain new client secret for Paylocity-issued client id. See Setup section for details.
     *
     * @param array $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddClientSecretBadRequestException
     * @throws \Paylocity\Api\Exception\AddClientSecretInternalServerErrorException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function addClientSecret(\Paylocity\Api\Model\AddClientSecret $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddClientSecret($requestBody, $headerParameters), $fetch);
    }

    /**
     * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
     *
     * @param string $companyId        Company Id
     * @param array  $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Paylocity\Api\Exception\AddNewEmployeeToWebLinkBadRequestException
     * @throws \Paylocity\Api\Exception\AddNewEmployeeToWebLinkInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\TrackingNumberResponse[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function addNewEmployeeToWebLink(string $companyId, \Paylocity\Api\Model\StagedEmployee $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Paylocity\Api\Endpoint\AddNewEmployeeToWebLink($companyId, $requestBody, $headerParameters), $fetch);
    }

    public static function create($httpClient = null)
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUrlFactory()->createUri('https://api.paylocity.com/api');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $serializer = new \Symfony\Component\Serializer\Serializer(\Paylocity\Api\Normalizer\NormalizerFactory::create(), [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode())]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
