<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Paylocity\Api\Endpoint;

class AddNewEmployeeToWebLink extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7Endpoint
{
    protected $companyId;

    /**
     * Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee.
     *
     * @param string                              $companyId        Company Id
     * @param \Paylocity\Api\Model\StagedEmployee $json             StagedEmployee Model
     * @param array                               $headerParameters {
     *
     *     @var string $Authorization Bearer + JWT
     * }
     */
    public function __construct(string $companyId, \Paylocity\Api\Model\StagedEmployee $json, array $headerParameters = [])
    {
        $this->companyId = $companyId;
        $this->body = $json;
        $this->headerParameters = $headerParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7EndpointTrait;

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{companyId}'], [$this->companyId], '/v2/weblinkstaging/companies/{companyId}/employees/newemployees');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return $this->getSerializedBody($serializer);
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Authorization']);
        $optionsResolver->setRequired(['Authorization']);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('Authorization', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Paylocity\Api\Exception\AddNewEmployeeToWebLinkBadRequestException
     * @throws \Paylocity\Api\Exception\AddNewEmployeeToWebLinkForbiddenException
     * @throws \Paylocity\Api\Exception\AddNewEmployeeToWebLinkInternalServerErrorException
     *
     * @return \Paylocity\Api\Model\TrackingNumberResponse[]|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType)
    {
        if (201 === $status) {
            return $serializer->deserialize($body, 'Paylocity\\Api\\Model\\TrackingNumberResponse[]', 'json');
        }
        if (400 === $status) {
            throw new \Paylocity\Api\Exception\AddNewEmployeeToWebLinkBadRequestException($serializer->deserialize($body, 'Paylocity\\Api\\Model\\Error[]', 'json'));
        }
        if (403 === $status) {
            throw new \Paylocity\Api\Exception\AddNewEmployeeToWebLinkForbiddenException();
        }
        if (500 === $status) {
            throw new \Paylocity\Api\Exception\AddNewEmployeeToWebLinkInternalServerErrorException($serializer->deserialize($body, 'Paylocity\\Api\\Model\\Error[]', 'json'));
        }
    }
}
